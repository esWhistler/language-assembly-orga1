scopeName: 'source.asm'
name: 'Assembly'
fileTypes: [ 'asm' ]
limitLineLength: false

patterns: [
    { include: '#comment' }
    {
        comment: 'Etiquetado'
        match: '^([^\ ]*)(\:)'
        captures:
          1: patterns: [
            { include: '#tag'}
          ]
          2: name: 'keyword.control.asm'
    }
    {
      comment: 'Funciones con 2 operandos'
      match: '(MOV|ADD|SUB|AND|OR|CMP|ADDC|ADC|XOR|STR|LOAD|STRr|LOADr|SHR|SHL|SET|MIX)\ +([0-9a-zA-Z\\[\\]\\+\ ]*)(,)\ *([0-9a-zA-Z\\[\\]\\+\ ]*)'
      captures:
        1: name: 'support.function.asm'
        2: patterns:[
          { include: '#registry'}
          { include: '#tag'}
          { include: '#hexaConstant'}
        ]
        3: name: 'support.function.asm'
        4: patterns:[
          { include: '#registry'}
          { include: '#tag'}
          { include: '#hexaConstant'}
        ]
    }
    {
      comment: 'Funciones con 1 operando'
      match: '(NEG|NOT|JMP|CALL|INC|DEC|SIG|PUSH|POP)\ +([0-9a-zA-Z\\[\\]\\+\ ]*)'
      captures:
        1: name: 'support.function.asm'
        2: patterns:[
          { include: '#registry'}
          { include: '#tag'}
          { include: '#hexaConstant'}
        ]
    }
    {
      comment: 'Funciones sin operandos'
      match: '(RET|IRET|CLI|STI)'
      name: 'support.function.asm'
    }
    {
      comment: 'Saltos condicionales'
      match: '(JE|JNE|JLE|JG|JL|JGE|JLEU|JGU|JCS|JNEG|JVS|JC|JZ|JN)\ +([0-9a-zA-Z\\[\\]\\+\ ]*)'
      captures:
        1: name: 'support.function.asm'
        2: patterns:[
          { include: '#registry'}
          { include: '#tag'}
          { include: '#hexaConstant'}
        ]
    }
    {
      comment: 'Directiva'
      match: '(DW)\ +(0x[0-9A-F]{1,4})'
      captures:
        1: name: 'support.function.asm'
        2: name: 'bold.constant.language.asm'
    }
]

repository:
    comment:{
        comment: 'Comentario del codigo'
        name: 'comment.line.asm'
        match: '[#\;].*$'
    }
    hexaConstant:{
      comment: 'Constantes'
      match: '(\\[{0,2})\ *(0x[0-9A-F]{1,4})\ *(\\]{0,2})'
      captures:
        1: name: 'string.regexp.character-class.asm'
        2: name: 'bold.constant.language.asm'
        3: name: 'string.regexp.character-class.asm'
    }
    registry:{
      comment: 'Registros'
      match: '(\\[{0,2})\ *(R[0-7])\ *((\\+)\ *(0x[0-9A-F]{1,4}))?\ *(\\]{0,2})'
      captures:
        1: name: 'string.regexp.character-class.asm'
        2: name: 'bold.variable.asm'
        4: name: 'string.regexp.character-class.asm'
        5: name: 'bold.constant.language.asm'
        6: name: 'string.regexp.character-class.asm'
    }
    tag:{
      comment: 'Etiquetas'
      match: '(\\[{0,2})\ *([A-Za-z]+)\ *(\\]{0,2})'
      captures:
        1: name: 'string.regexp.character-class.asm'
        2: name: 'keyword.control.asm'
        3: name: 'string.regexp.character-class.asm'
    }
